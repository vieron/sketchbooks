---
import Sketch from "../../../layouts/Sketch.astro";
---

<Sketch title="003 Line">
  <script>
    import p5 from "p5";
    import poissonDisk from "../../../sketch-utils/poisson-disk";
    import { chooseWeighted } from "../../../sketch-utils/random";
    import {
      createTextImage,
      getFontSizeToFit,
    } from "../../../sketch-utils/type";
    import type { FontAttributes } from "../../../sketch-utils/type";
    import { drawHobbyLines } from "../../../sketch-utils/hobby-lines";

    // poisson disc
    let tries: number;
    let radius: number;
    let lineWeight: number;
    let lineTension: () => number;

    let margin: number;
    let img: ImageData;

    // general params
    let text: string;
    let framesPerSecond: number;

    let pointsPerLine: () => number;
    let strokeWidth: number;
    let marginRange: number[];

    let bgColor: string;
    let fgColorHue: number; // 0-360
    let strokeColor: p5.Color;
    let fgPalette: [number, p5.Color][];

    let fontName: string;
    let fontSize: number;
    let fontWeight: number;

    let angleVariation: number;

    window.setup = () => {
      noLoop();
      createCanvas(windowWidth, windowHeight);
      colorMode(HSB);
      frameRate(framesPerSecond);

      // params
      radius = 10;
      tries = 20;
      text = "FORM";
      framesPerSecond = 1;

      lineWeight = 14;
      strokeWidth = 1.4; //px
      pointsPerLine = () =>
        chooseWeighted([
          [0.8, 3],
          [0.1, 2],
        ]);
      lineTension = () =>
        chooseWeighted([
          [0.6, 0.8],
          [0.6, 1],
        ]);
      marginRange = [20, 60];

      // computed params
      bgColor = "#FFF";
      fgColorHue = floor(random(0, 360)); // 345;
      strokeColor = color(fgColorHue, 80, 30);
      fgPalette = [
        [0.5, color(fgColorHue, 100, 100)],
        [0.2, color(fgColorHue, 80, 100)],
        [0.2, color(fgColorHue, 100, 80)],
        [0.2, color(fgColorHue, 50, 100)],
        [0.2, color(fgColorHue, 100, 50)],
        [0.1, color(fgColorHue, 20, 100)],
      ];

      fontName = random([
        "system-ui",
        // "Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro",
        // "ArchivoBlack-Regular",
        // "JustBubbleRegular",
      ]);
      fontWeight = 900;

      angleVariation = QUARTER_PI / 4;
      margin = map(width, 300, 4000, marginRange[0], marginRange[1]);
    };

    window.draw = () => {
      background(bgColor);

      const fontAttributes: FontAttributes = {
        fontName,
        fontSize,
        fontWeight,
        letterSpacing: "0em",
      };

      fontSize = getFontSizeToFit({
        textSample: text,
        width: width - margin,
        height: width - margin,
        ...fontAttributes,
      });
      fontAttributes.fontSize = fontSize;

      // BACKGROUND
      //
      const bgOffset = 100;
      const bgPoints = poissonDisk({
        radius: 100,
        tries: 10,
        width: width + bgOffset * 2,
        height: height + bgOffset * 2,
      });

      push();
      translate(-bgOffset, -bgOffset);
      drawHobbyLines(bgPoints, {
        pointsPerLine: () => 3,
        strokeColor: color(bgColor),
        strokeWidth: 4,
        lineWeight: 80,
        fgPalette: [[0.1, color(fgColorHue, 20, 100)]],
      });
      pop();

      //
      // COMPUTE LETTERS
      //
      const letters = text.split("").map((char, i) => {
        img = createTextImage({
          textSample: char,
          ...fontAttributes,
        });

        const points = poissonDisk({
          radius,
          tries,
          width: img.width,
          height: img.height,
        });

        return {
          img,
          points,
        };
      });

      const lettersSize = letters.reduce(
        ({ width, height }, { img }) => ({
          width: width + img.width,
          height: Math.max(height, img.height),
        }),
        { width: 0, height: 0 }
      );
      const baseX = width / 2 - lettersSize.width / 2;
      const baseY = height / 2 - lettersSize.height / 2;

      //
      // DRAW LETTERS
      //
      translate(baseX, baseY);
      let xOffset = 0;

      letters.forEach(({ img, points }, i) => {
        push();
        translate(xOffset, 0);

        // rotate from center
        translate(img.width / 2, img.height / 2);
        rotate(random(-angleVariation, angleVariation));
        translate(-img.width / 2, -img.height / 2);

        // draw letter
        drawHobbyLines(points, {
          pointsPerLine,
          strokeColor,
          strokeWidth,
          lineWeight,
          fgPalette,
          skipPoint: (point) => {
            const index =
              Math.floor(
                Math.floor(point.y) * img.width + Math.floor(point.x)
              ) * 4;
            const alpha = img.data[index + 3];

            // discard points outside of typography shape
            if (alpha === 0 || typeof alpha === "undefined") {
              return true;
            }

            return false;
          },
        });
        pop();

        xOffset += img.width;
      });
    };
  </script>
</Sketch>
