---
import Sketch from "../../../layouts/Sketch.astro";
---

<Sketch title="003 Line">
  <script>
    import type p5 from "p5";
    import palettes from "nice-color-palettes";
    import poissonDisk from "../../../sketch-utils/poisson-disk";
    import { chooseWeighted } from "../../../sketch-utils/random";
    import {
      createTextImage,
      getFontSizeToFit,
    } from "../../../sketch-utils/type";
    import type { FontAttributes } from "../../../sketch-utils/type";
    import { drawHobbyLines } from "../../../sketch-utils/hobby-lines";
    import Controls from "../../../lib/controls/Controls";

    window.sketch = (p) => {
      // poisson disc
      let tries: number;
      let radius: number;
      let lineWeight: number;
      let lineTension: () => number;

      let margin: number;
      let img: ImageData;

      // general params
      let text: string;

      let pointsPerLine: number;
      let strokeWidth: number;
      let marginRange: number[];

      let bgColor: string;
      let strokeColor: p5.Color;
      let fgPalette: [number, p5.Color][];

      let fontName: string;
      let fontSize: number;
      let fontWeight: number;

      let angleVariation: number;
      let font: p5.Font;

      const c = new Controls(
        {
          // text
          text: {
            name: "Text",
            type: "text",
            defaultValue: "FORM",
          },

          // points
          radius: {
            name: "Distance between points",
            type: "range",
            defaultValue: 10,
            min: 1,
            max: 100,
            value: (controlValue) =>
              p.map(p.width, 300, 2000, 1.5, controlValue),
          },
          tries: {
            name: "Tries",
            type: "range",
            defaultValue: 30,
            min: 1,
            max: 3000,
          },

          // lines
          lineWeight: {
            name: "Line weight",
            type: "range",
            defaultValue: 9,
            min: 1,
            max: 100,
            value: (controlValue) => p.map(p.width, 300, 2000, 2, controlValue),
          },
          lineColorPalette: {
            name: "Line color palette",
            type: "colorpalette",
            defaultValue: palettes[
              p.floor(p.random(0, palettes.length - 1))
            ].map((color) => [1, color]),
          },

          lineStrokeWidth: {
            name: "Line stroke width",
            type: "range",
            defaultValue: 0.5,
            min: 0,
            max: 80,
            step: 0.2,
          },
          strokeColor: {
            name: "Stroke color",
            type: "color",
            defaultValue: "#111",
          },

          pointsPerLine: {
            name: "Line length",
            type: "range",
            defaultValue: 3,
            min: 2,
            max: 360,
          },

          // background
          showBackground: {
            name: "Show background",
            type: "boolean",
            defaultValue: false,
          },

          // actions
          saveScreenshot: {
            name: "Save image",
            type: "button",
            defaultValue: null,
            action: () => {
              const filename = `${Date.now()}.png`;

              p.save(filename);
            },
          },
        },
        document.body.querySelector("#sketch-controls")!
      );

      c.subscribe((state) => {
        p.draw();
      });

      p.preload = async () => {
        // font = p.loadFont("/public/fonts/Atop.ttf");
        // font = p.loadFont("/public/fonts/Humane-Bold.otf");
        // font = p.loadFont("/public/fonts/Thunder-ExtraBoldLC.otf");
      };

      p.setup = () => {
        p.noLoop();
        p.createCanvas(p.windowWidth, p.windowHeight);
        p.colorMode(p.HSB);

        c.init();
        // frameRate(framesPerSecond);
      };

      p.draw = () => {
        const o = c.controls;

        // params
        radius = o.radius.value;
        tries = o.tries.value;
        text = o.text.value;
        lineWeight = o.lineWeight.value;
        strokeWidth = o.lineStrokeWidth.value; //px
        pointsPerLine = o.pointsPerLine.value;
        lineTension = () =>
          chooseWeighted(p, [
            [0.6, 0.8],
            [0.2, 1],
          ]);
        marginRange = [20, 80];

        // computed params
        bgColor = "#FFF";
        strokeColor = p.color(o.strokeColor.value);

        fontName = p.random([
          "system-ui",
          // "Atop",
          // "Humane-Bold",
          // "Thunder-ExtraBoldLC",
          // "Avenir, Montserrat, Corbel, 'URW Gothic', source-sans-pro",
          // "ArchivoBlack-Regular",
          // "JustBubbleRegular",
        ]);
        fontWeight = 900;

        angleVariation = p.QUARTER_PI / 10;
        margin = p.map(p.width, 300, 4000, marginRange[0], marginRange[1]);

        // init
        p.background(bgColor);

        const fontAttributes: FontAttributes = {
          fontName,
          fontSize,
          fontWeight,
          letterSpacing: "-0.0.2em",
        };

        // calculate fontSize to fit
        fontSize = getFontSizeToFit({
          textSample: text,
          width: p.width - margin * 2,
          height: p.width - margin * 2,
          ...fontAttributes,
        });
        fontAttributes.fontSize = fontSize;

        // BACKGROUND
        //
        if (o.showBackground.value) {
          const bgOffset = 100;
          const bgPoints = poissonDisk(p, {
            radius: 5,
            tries: 30,
            width: p.width + bgOffset * 2,
            height: p.height + bgOffset * 2,
          });

          p.push();
          p.translate(-bgOffset, -bgOffset);
          drawHobbyLines(p, bgPoints, {
            pointsPerLine: () => o.pointsPerLine.value,
            strokeColor: p.color(bgColor),
            strokeWidth: 2,
            lineWeight: 3,
            fgPalette: o.lineColorPalette.value,
          });
          p.pop();
        }

        //
        // COMPUTE LETTERS
        //
        const letters = text.split("").map((char, i) => {
          img = createTextImage({
            textSample: char,
            ...fontAttributes,
          });

          const points = poissonDisk(p, {
            radius,
            tries,
            width: img.width,
            height: img.height,
          });

          return {
            img,
            points,
          };
        });

        const lettersSize = letters.reduce(
          ({ width, height }, { img }) => ({
            width: width + img.width,
            height: Math.max(height, img.height),
          }),
          { width: 0, height: 0 }
        );
        const baseX = p.width / 2 - lettersSize.width / 2;
        const baseY = p.height / 2 - lettersSize.height / 2;

        //
        // DRAW LETTERS
        //
        p.push();
        p.translate(baseX, baseY);
        let xOffset = 0;

        letters.forEach(({ img, points }, i) => {
          p.push();
          p.translate(xOffset, 0);

          // rotate from center
          p.translate(img.width / 2, img.height / 2);
          p.rotate(p.random(-angleVariation, angleVariation));
          p.translate(-img.width / 2, -img.height / 2);

          // draw letter
          drawHobbyLines(p, points, {
            pointsPerLine: () => o.pointsPerLine.value,
            strokeColor,
            strokeWidth,
            lineWeight,
            fgPalette: o.lineColorPalette.value,
            skipPoint: (point) => {
              const index =
                Math.floor(
                  Math.floor(point.y) * img.width + Math.floor(point.x)
                ) * 4;
              const alpha = img.data[index + 3];

              // discard points outside of typography shape
              if (alpha === 0 || typeof alpha === "undefined") {
                return true;
              }

              return false;
            },
          });
          p.pop();

          xOffset += img.width;
        });
        p.pop();
      };
    };
  </script>
</Sketch>
