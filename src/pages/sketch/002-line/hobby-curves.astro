---
import Sketch from "../../../layouts/Sketch.astro";
---

<Sketch title="003 Line">
  <script>
    import p5 from "p5";
    import { createHobbyBezier } from "hobby-curve";
    import { drawHobbyLines } from "../../../sketch-utils/hobby-lines";

    window.sketch = (p, container, queryParams, { createControls }) => {
      // general params
      const framesPerSecond = 1;
      const stepsPerFrame = 20000;

      const pointsPerLine = [3, 3];
      const marginRange = [20, 140];
      let hue: number;

      const c = createControls({
        controls: {
          radius: {
            name: "Min. points distance",
            type: "range",
            defaultValue: 38,
            min: 2,
            max: 100,
            value: (controlValue) =>
              p.floor(p.map(p.width, 300, 1000, 10, controlValue)),
          },
          lineWeight: {
            name: "Line weight",
            type: "range",
            defaultValue: 15,
            min: 0.2,
            max: 100,
            step: 0.2,
            value: (controlValue) =>
              +p.map(p.width, 300, 1000, 10, controlValue).toFixed(1),
          },
          lineTension: {
            name: "Line tension",
            type: "range",
            defaultValue: 1,
            min: 0.1,
            max: 1.0,
            step: 0.1,
          },
          lineColorPalette: {
            name: "Line color palette",
            type: "colorpalette",
            defaultValue: ["#2B2E4A", "#E84545", "#903749", "#53354A"].map(
              (color) => [1, color]
            ),
            // defaultValue: palettes[
            //   p.floor(p.random(0, palettes.length - 1))
            // ].map((color) => [1, color]),
          },

          strokeWidth: {
            name: "Stroke width",
            type: "range",
            defaultValue: 0,
            min: 0,
            max: 80,
            step: 0.2,
          },
          strokeColor: {
            name: "Stroke color",
            type: "color",
            defaultValue: "#FFFFFF",
          },

          bgColor: {
            name: "Background color",
            type: "color",
            defaultValue: "#FFFFFF",
          },
          // showBackground: {
          //   name: "Show background",
          //   type: "boolean",
          //   defaultValue: false,
          // },

          // actions
          actions: {
            name: "Actions",
            type: "buttons",
            defaultValue: null,
            actions: [
              {
                name: "Save image",
                action: () => {
                  const filename = `${Date.now()}.png`;

                  p.save(filename);
                },
              },
              {
                name: "Redraw",
                action: () => p.draw(),
              },
            ],
          },
        },
      });

      p.setup = () => {
        p.noLoop();
        p.createCanvas(container.clientWidth, container.clientHeight);
        p.strokeWeight(4);
        p.colorMode(p.HSB);
        p.frameRate(framesPerSecond);

        c.init();
      };

      p.draw = () => {
        let grid: (undefined | p5.Vector)[] = [];
        const active: p5.Vector[] = [];
        const ordered: p5.Vector[] = [];

        // params
        let radius = c.controls.radius.value;
        let tries = 30;

        // computed params
        const cellSize = radius / Math.sqrt(2); // cell width;
        const margin = p.map(p.width, 0, 4000, marginRange[0], marginRange[1]);
        const gridWidth = p.width - margin * 2;
        const gridHeight = p.height - margin * 2;

        // STEP 0
        const cols = p.floor(gridWidth / cellSize);
        const rows = p.floor(gridHeight / cellSize);
        for (let i = 0; i < cols * rows; i++) {
          grid[i] = undefined;
        }

        // STEP 1
        const x = gridWidth / 2;
        const y = gridHeight / 2;
        const j = p.floor(x / cellSize);
        const k = p.floor(y / cellSize);
        const pos = p.createVector(x, y);

        grid[j + k * cols] = pos;

        active.push(pos);

        // start
        p.background(p.color(c.controls.bgColor.value));
        p.push();
        p.translate(margin, margin);

        for (var steps = 0; steps < stepsPerFrame; steps++) {
          if (active.length > 0) {
            //   const randIndex = floor(random(active.length));
            const randIndex = active.length - 1;
            const pos = active[randIndex];

            let found = false;
            // tries
            for (let n = 0; n < tries; n++) {
              const sample = p5.Vector.random2D();
              const mag = p.random(radius, 2 * radius);

              sample.setMag(mag);
              sample.add(pos);

              const col = p.floor(sample.x / cellSize);
              const row = p.floor(sample.y / cellSize);
              const cellIndex = col + row * cols;

              // find valid neighbor
              if (
                col >= 0 &&
                row >= 0 &&
                col < cols &&
                row < rows &&
                !grid[cellIndex]
              ) {
                let valid = true;
                for (let i = -1; i <= 1; i++) {
                  for (let j = -1; j <= 1; j++) {
                    const index = col + i + (row + j) * cols;
                    const neighbor = grid[index];

                    if (neighbor) {
                      const d = p5.Vector.dist(sample, neighbor);

                      if (d < radius) {
                        valid = false;
                        break;
                      }
                    }
                  }
                }

                if (valid) {
                  found = true;
                  grid[cellIndex] = sample;

                  active.push(sample);
                  ordered.push(sample);
                  break;
                }
              }
            }

            if (!found) {
              active.splice(randIndex, 1);
            }
          }
        }

        let currentLine: p5.Vector[] = [];
        // let localPointsPerLine: number = 30;
        let localPointsPerLine: number = p.floor(
          p.random(pointsPerLine[0], pointsPerLine[1])
        );

        for (var i = 0; i < ordered.length; i++) {
          const point = ordered[i];

          // debugging point
          // stroke(color("red"));
          // strokeWeight(2);
          // noFill();
          // circle(point.x, point.y, 3);

          currentLine.push(point);

          if (currentLine.length === localPointsPerLine) {
            drawHobbyLines(p, [currentLine], {
              strokeColor: p.color(c.controls.strokeColor.value),
              strokeWidth: c.controls.strokeWidth.value,
              fgPalette: c.controls.lineColorPalette.value,
              tension: c.controls.lineTension.value,
            });

            // empty line
            localPointsPerLine = p.floor(
              p.random(pointsPerLine[0], pointsPerLine[1])
            );
            currentLine = [];
          }
        }
        p.pop();
      };
    };
  </script>
</Sketch>
