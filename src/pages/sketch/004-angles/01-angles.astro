---
import Sketch from "../../../layouts/Sketch.astro";
---

<Sketch title="Angles">
  <script>
    import "p5";
    import { Vector } from "p5";

    let center: Vector;
    let mouse: Vector;

    window.sketch = (p, container) => {
      p.setup = () => {
        p.createCanvas(container.clientWidth, container.clientHeight);

        center = p.createVector(p.width / 2, p.height / 2);
        mouse = p.createVector(p.width / 3, p.height / 3);
      };

      p.touchMoved = p.mouseMoved = () => {
        mouse.x = p.mouseX;
        mouse.y = p.mouseY;
      };

      p.draw = () => {
        p.background(255);

        const xLength = mouse.x - center.x;
        const yLength = mouse.y - center.y;
        // Cartesian to polar coords
        const radius = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
        // Pythagoras
        const angle = p.atan2(yLength, xLength);
        const x = radius * p.cos(angle);
        const y = radius * p.sin(angle);

        const arcSize = Math.min(50, radius / 2);
        let startAngle: number;
        let endAngle: number;

        if (x >= 0) {
          startAngle = y <= 0 ? angle : 0;
          endAngle = y <= 0 ? 0 : angle;
        } else {
          startAngle = y <= 0 ? angle + (p.PI - angle) : angle;
          endAngle = y <= 0 ? angle : angle + (p.PI - angle);
        }

        const innerAngle = Math.abs(Math.abs(endAngle) - Math.abs(startAngle));

        p.push();
        p.translate(center.x, center.y);
        // general axis
        p.stroke(0, 30);
        p.strokeWeight(1);
        p.line(0, -p.height / 2, 0, p.height / 2); // y
        p.line(-p.width / 2, 0, p.width / 2, 0); // x
        // inner axis
        p.stroke(0, 100);
        p.strokeWeight(1);
        p.line(-radius, 0, radius, 0);
        p.line(0, -radius, 0, radius);
        p.pop();

        // outer circle
        p.noFill();
        p.stroke(0, 60);
        p.strokeWeight(1);
        p.circle(center.x, center.y, radius * 2);

        // outer triangle angle
        // stroke(0, 0, 255);
        // arc(center.x, center.y, arcSize, arcSize, angle, 0, OPEN);

        // inner triangle angle

        // inner angle text
        p.push();
        p.stroke(0);
        p.strokeWeight(1);
        p.translate(center.x, center.y);
        p.arc(0, 0, arcSize, arcSize, startAngle, endAngle, p.OPEN);

        (() => {
          const message = `angle (${innerAngle.toFixed(2)}rad) (${p.degrees(innerAngle).toFixed(0)}deg)`;
          const w = p.textWidth(message);
          const offset = arcSize / 2 + 15;

          if (x >= 0) {
            p.rotate((y < 0 ? -1 : 1) * (innerAngle / 2));
            p.text(message, offset, 3);
          } else {
            p.rotate((y < 0 ? 1 : -1) * (innerAngle / 2));
            p.text(message, -w - offset, 3);
          }
        })();
        p.pop();

        // projected arc length
        p.stroke(0, 150, 150);
        p.strokeWeight(2);
        p.arc(
          center.x,
          center.y,
          radius * 2,
          radius * 2,
          startAngle,
          endAngle,
          p.OPEN
        );

        // radius
        p.push();
        p.stroke(255, 0, 0);
        p.strokeWeight(1);
        p.translate(center.x, center.y);
        p.line(0, 0, x, y);
        // radius text
        (() => {
          const message = `r ${radius.toFixed(2)}`;
          const w = p.textWidth(message);
          const offset = y < 0 ? -12 : 20;

          if (x >= 0) {
            p.rotate((y < 0 ? -1 : 1) * innerAngle);
            p.text(message, radius / 2 - w / 2, offset);
          } else {
            p.rotate((y < 0 ? 1 : -1) * innerAngle);
            p.text(message, -(radius / 2 + w / 2), offset);
          }
        })();
        p.pop();

        // y
        p.push();
        p.stroke(0, 0, 255);
        p.strokeWeight(1);
        p.translate(center.x, center.y);
        p.line(x, y, x, 0);
        p.text(`y ${y.toFixed(2)}`, x + 10, y / 2 + 5);
        p.pop();

        // x
        p.push();
        p.stroke(0, 200, 0);
        p.strokeWeight(1);
        p.translate(center.x, center.y);
        p.line(0, 0, x, 0);
        (() => {
          const message = `x ${x.toFixed(2)}`;
          const w = p.textWidth(message);
          p.text(message, x / 2 - w / 2, 20);
        })();
        p.pop();
      };
    };
  </script>
</Sketch>
