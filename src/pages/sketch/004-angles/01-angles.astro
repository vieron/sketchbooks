---
import Sketch from "../../../layouts/Sketch.astro";
---

<Sketch title="Angles">
  <script>
    import "p5";
    import { Vector } from "p5";

    let center: Vector;
    let mouse: Vector;

    window.setup = () => {
      createCanvas(windowWidth, windowHeight);

      center = createVector(width / 2, height / 2);
      mouse = createVector(width / 3, height / 3);
    };

    window.touchMoved = window.mouseMoved = () => {
      mouse.x = mouseX;
      mouse.y = mouseY;
    };

    window.draw = () => {
      background(255);

      const xLength = mouse.x - center.x;
      const yLength = mouse.y - center.y;
      // Cartesian to polar coords
      const radius = Math.sqrt(Math.pow(xLength, 2) + Math.pow(yLength, 2));
      // Pythagoras
      const angle = atan2(yLength, xLength);
      const x = radius * cos(angle);
      const y = radius * sin(angle);

      const arcSize = Math.min(50, radius / 2);
      let startAngle: number;
      let endAngle: number;

      if (x >= 0) {
        startAngle = y <= 0 ? angle : 0;
        endAngle = y <= 0 ? 0 : angle;
      } else {
        startAngle = y <= 0 ? angle + (PI - angle) : angle;
        endAngle = y <= 0 ? angle : angle + (PI - angle);
      }

      const innerAngle = Math.abs(Math.abs(endAngle) - Math.abs(startAngle));

      push();
      translate(center.x, center.y);
      // general axis
      stroke(0, 30);
      strokeWeight(1);
      line(0, -height / 2, 0, height / 2); // y
      line(-width / 2, 0, width / 2, 0); // x
      // inner axis
      stroke(0, 100);
      strokeWeight(1);
      line(-radius, 0, radius, 0);
      line(0, -radius, 0, radius);
      pop();

      // outer circle
      noFill();
      stroke(0, 60);
      strokeWeight(1);
      circle(center.x, center.y, radius * 2);

      // outer triangle angle
      // stroke(0, 0, 255);
      // arc(center.x, center.y, arcSize, arcSize, angle, 0, OPEN);

      // inner triangle angle

      // inner angle text
      push();
      stroke(0);
      strokeWeight(1);
      translate(center.x, center.y);
      arc(0, 0, arcSize, arcSize, startAngle, endAngle, OPEN);

      (() => {
        const message = `angle (${innerAngle.toFixed(2)}rad) (${degrees(innerAngle).toFixed(0)}deg)`;
        const w = textWidth(message);
        const offset = arcSize / 2 + 15;

        if (x >= 0) {
          rotate((y < 0 ? -1 : 1) * (innerAngle / 2));
          text(message, offset, 3);
        } else {
          rotate((y < 0 ? 1 : -1) * (innerAngle / 2));
          text(message, -w - offset, 3);
        }
      })();
      pop();

      // projected arc length
      stroke(0, 150, 150);
      strokeWeight(2);
      arc(
        center.x,
        center.y,
        radius * 2,
        radius * 2,
        startAngle,
        endAngle,
        OPEN
      );

      // radius
      push();
      stroke(255, 0, 0);
      strokeWeight(1);
      translate(center.x, center.y);
      line(0, 0, x, y);
      // radius text
      (() => {
        const message = `r ${radius.toFixed(2)}`;
        const w = textWidth(message);
        const offset = y < 0 ? -12 : 20;

        if (x >= 0) {
          rotate((y < 0 ? -1 : 1) * innerAngle);
          text(message, radius / 2 - w / 2, offset);
        } else {
          rotate((y < 0 ? 1 : -1) * innerAngle);
          text(message, -(radius / 2 + w / 2), offset);
        }
      })();
      pop();

      // y
      push();
      stroke(0, 0, 255);
      strokeWeight(1);
      translate(center.x, center.y);
      line(x, y, x, 0);
      text(`y ${y.toFixed(2)}`, x + 10, y / 2 + 5);
      pop();

      // x
      push();
      stroke(0, 200, 0);
      strokeWeight(1);
      translate(center.x, center.y);
      line(0, 0, x, 0);
      (() => {
        const message = `x ${x.toFixed(2)}`;
        const w = textWidth(message);
        text(message, x / 2 - w / 2, 20);
      })();
      pop();
    };
  </script>
</Sketch>
